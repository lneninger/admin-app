{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { State, Selector, Action } from '@ngxs/store';\nimport { Persistence, StateRepository } from '@angular-ru/ngxs/decorators';\nimport { NgxsDataRepository } from '@angular-ru/ngxs/repositories';\nimport produce from 'immer';\nimport * as i0 from \"@angular/core\";\nexport let MenuToggleAction = /*#__PURE__*/(() => {\n  class MenuToggleAction {}\n\n  MenuToggleAction.type = `[Menu] ToggleAction`;\n  return MenuToggleAction;\n})();\nexport let MenuExpandedToggleAction = /*#__PURE__*/(() => {\n  class MenuExpandedToggleAction {}\n\n  MenuExpandedToggleAction.type = `[Menu] ExpandedToggleAction`;\n  return MenuExpandedToggleAction;\n})();\nexport let OptionsExpandedToggleAction = /*#__PURE__*/(() => {\n  class OptionsExpandedToggleAction {\n    constructor(option) {\n      this.option = option;\n    }\n\n  }\n\n  OptionsExpandedToggleAction.type = `[Options] ExpandedToggleAction`; // const options: PersistenceProvider[] = [\n  //   {\n  //     prefixKey: '@menuapp', // custom prefix\n  //     path: 'auth', // path to slice\n  //     existingEngine: localStorage, // storage instance\n  //     ttl: 60 * 60 * 24 * 1000 // 24 hour for time to live\n  //   }\n  // ];\n\n  return OptionsExpandedToggleAction;\n})();\nlet AppConfigState = class AppConfigState extends NgxsDataRepository {\n  static menu(state) {\n    return state.menu;\n  }\n\n  static options(state) {\n    return state.options;\n  }\n\n  menuToggle(ctx, action) {\n    const auth = ctx.setState(produce(ctx.getState(), draft => {\n      draft.menu.show = !draft.menu.show;\n    }));\n  }\n\n  menuExpandedToggle(ctx, action) {\n    const auth = ctx.setState(produce(ctx.getState(), draft => {\n      draft.menu.expanded = !draft.menu.expanded;\n    }));\n  }\n\n  optionsExpandedToggle(ctx, action) {\n    const auth = ctx.setState(produce(ctx.getState(), draft => {\n      draft.options = draft.options || {};\n      draft.options.expanded = !draft.options.expanded;\n      draft.options.current = action.option || draft.options.current;\n    }));\n  }\n\n};\n\nAppConfigState.ɵfac = /*@__PURE__*/function () {\n  let ɵAppConfigState_BaseFactory;\n  return function AppConfigState_Factory(t) {\n    return (ɵAppConfigState_BaseFactory || (ɵAppConfigState_BaseFactory = i0.ɵɵgetInheritedFactory(AppConfigState)))(t || AppConfigState);\n  };\n}();\n\nAppConfigState.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppConfigState,\n  factory: AppConfigState.ɵfac\n});\n\n__decorate([Action(MenuToggleAction)], AppConfigState.prototype, \"menuToggle\", null);\n\n__decorate([Action(MenuExpandedToggleAction)], AppConfigState.prototype, \"menuExpandedToggle\", null);\n\n__decorate([Action(OptionsExpandedToggleAction)], AppConfigState.prototype, \"optionsExpandedToggle\", null);\n\n__decorate([Selector()], AppConfigState, \"menu\", null);\n\n__decorate([Selector()], AppConfigState, \"options\", null);\n\nAppConfigState = __decorate([Persistence(), StateRepository(), State({\n  name: 'configState',\n  defaults: {\n    menu: {\n      show: true,\n      expanded: true\n    },\n    options: {\n      expanded: false,\n      current: null\n    }\n  }\n})], AppConfigState);\nexport { AppConfigState };","map":null,"metadata":{},"sourceType":"module"}