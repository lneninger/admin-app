{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/main/services/product-category/product-category.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/chips\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/material/autocomplete\";\nimport * as i11 from \"@angular/material/core\";\nimport * as i12 from \"@angular/material/button\";\nconst _c0 = [\"tagInput\"];\n\nfunction ProductCategoryComponent_mat_chip_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"mat-icon\", 20);\n    i0.ɵɵtext(3, \"cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tag_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"selectable\", true)(\"removable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tag_r5, \" \");\n  }\n}\n\nfunction ProductCategoryComponent_mat_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tag_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", tag_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tag_r6, \" \");\n  }\n}\n\nexport let ProductCategoryComponent = /*#__PURE__*/(() => {\n  class ProductCategoryComponent {\n    //#endregion\n    constructor(fmBuilder, service, data, dialogRef) {\n      this.fmBuilder = fmBuilder;\n      this.service = service;\n      this.data = data;\n      this.dialogRef = dialogRef;\n      this.tagInputControl = new FormControl(); //#region  Category Tags\n\n      this.productCategoryTags = this.service.productCategoryTags;\n      this.separatorKeysCodes = [ENTER, COMMA]; // debugger;\n\n      this.item = data.item;\n      this.parent = data.parent;\n    }\n\n    get tagFormControl() {\n      return this.form.get('tags');\n    }\n\n    get tagsRaw() {\n      return this.form.get('tags').value || '';\n    }\n\n    set tagsRaw(value) {\n      this.tagFormControl.setValue(value);\n    }\n\n    get selectedTags() {\n      const value = this.tagsRaw;\n      return value ? value.split(',').map(item => item.trim().toLocaleUpperCase()) : [];\n    }\n\n    setTags(value) {\n      const split = (value || '').split(',').map(item => item.trim().toLocaleUpperCase());\n      const toAdd = [];\n      split.forEach(newItem => {\n        if (newItem.length > 0) {\n          if (!this.selectedTags.some(tagsItem => tagsItem === newItem)) {\n            toAdd.push(newItem);\n          }\n        }\n      });\n\n      if (toAdd.length > 0) {\n        let formValue = this.tagsRaw;\n        const newItemsFormatted = this.stringJoin(toAdd);\n        formValue = (formValue || '').length === 0 ? newItemsFormatted : formValue + ',' + newItemsFormatted;\n        this.tagsRaw = formValue;\n      }\n    }\n\n    stringJoin(toAdd, separator = ',') {\n      return toAdd.reduce((prev, cur, index, toAdd) => (prev || '') + separator + cur);\n    }\n\n    ngOnInit() {\n      this.form = this.createForm();\n    }\n\n    createForm() {\n      return this.fmBuilder.group({\n        name: [this.item && this.item.name, [Validators.required]],\n        description: [this.item && this.item.description],\n        parentId: [this.parent && this.parent.id],\n        tags: [this.item && this.parent.tags]\n      });\n    }\n\n    onSubmit(event) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.form.valid) {\n          const request = this.form.getRawValue();\n\n          try {\n            const response = yield firstValueFrom(this.service.add(request));\n          } catch (error) {}\n\n          this.service.reload$.next(null);\n          this.dialogRef.close();\n        }\n      });\n    }\n\n    addTag($event) {\n      const input = $event.input;\n      const value = $event.value; // Add our fruit\n\n      if (value) {\n        this.setTags(value);\n      } // Reset the input value\n\n\n      if (input) {\n        input.value = '';\n      }\n\n      this.tagInputControl.setValue(null);\n    }\n\n    remove(value) {\n      const tags = this.selectedTags;\n      const index = tags.indexOf((value || '').trim().toLocaleUpperCase());\n\n      if (index >= 0) {\n        tags.splice(index, 1);\n        this.tagsRaw = this.stringJoin(tags);\n      }\n    }\n\n    selected(event) {\n      this.setTags(event.option.viewValue);\n      this.tagInput.nativeElement.value = '';\n      this.tagInputControl.setValue(null);\n    }\n\n  }\n\n  ProductCategoryComponent.ɵfac = function ProductCategoryComponent_Factory(t) {\n    return new (t || ProductCategoryComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ProductCategoryService), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i3.MatDialogRef));\n  };\n\n  ProductCategoryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProductCategoryComponent,\n    selectors: [[\"app-product-category\"]],\n    viewQuery: function ProductCategoryComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tagInput = _t.first);\n      }\n    },\n    decls: 33,\n    vars: 8,\n    consts: [[\"mat-dialog-title\", \"\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mat-typography\"], [\"fxFlex\", \"100%\", \"fxLayout\", \"row wrap\", 1, \"flex\", \"flex-wrap\", \"gap-2\"], [\"fxFlex\", \"100%\"], [\"formControlName\", \"name\", \"matInput\", \"\", \"type\", \"text\"], [\"formControlName\", \"description\", \"matInput\", \"\", \"type\", \"text\"], [\"aria-label\", \"Fruit selection\"], [\"chipList\", \"\"], [3, \"selectable\", \"removable\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"Tag...\", 3, \"formControl\", \"matAutocomplete\", \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputTokenEnd\"], [\"tagInput\", \"\"], [3, \"optionSelected\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"disabled\", \"disabled\", \"type\", \"text\", 3, \"value\"], [1, \"flex\", \"justify-between\"], [\"mat-button\", \"\", \"mat-dialog-close\", \"\"], [\"mat-button\", \"\", \"mat-dialog-close\", \"\", \"type\", \"submit\"], [3, \"selectable\", \"removable\"], [\"matChipRemove\", \"\"], [3, \"value\"]],\n    template: function ProductCategoryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1, \"Product Category\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function ProductCategoryComponent_Template_form_ngSubmit_2_listener($event) {\n          return ctx.onSubmit($event);\n        });\n        i0.ɵɵelementStart(3, \"mat-dialog-content\", 2);\n        i0.ɵɵelementStart(4, \"section\", 3);\n        i0.ɵɵelementStart(5, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(6, \"mat-label\");\n        i0.ɵɵtext(7, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(14, \"mat-label\");\n        i0.ɵɵtext(15, \"Tag\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-chip-list\", 7, 8);\n        i0.ɵɵtemplate(18, ProductCategoryComponent_mat_chip_18_Template, 4, 3, \"mat-chip\", 9);\n        i0.ɵɵelementStart(19, \"input\", 10, 11);\n        i0.ɵɵlistener(\"matChipInputTokenEnd\", function ProductCategoryComponent_Template_input_matChipInputTokenEnd_19_listener($event) {\n          return ctx.addTag($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"mat-autocomplete\", 12, 13);\n        i0.ɵɵlistener(\"optionSelected\", function ProductCategoryComponent_Template_mat_autocomplete_optionSelected_21_listener($event) {\n          return ctx.selected($event);\n        });\n        i0.ɵɵtemplate(23, ProductCategoryComponent_mat_option_23_Template, 2, 2, \"mat-option\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(25, \"mat-label\");\n        i0.ɵɵtext(26, \"Parent\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"input\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"mat-dialog-actions\", 16);\n        i0.ɵɵelementStart(29, \"button\", 17);\n        i0.ɵɵtext(30, \"Close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"button\", 18);\n        i0.ɵɵtext(32, \"Ok\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(17);\n\n        const _r3 = i0.ɵɵreference(22);\n\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"ngForOf\", ctx.selectedTags);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formControl\", ctx.tagInputControl)(\"matAutocomplete\", _r3)(\"matChipInputFor\", _r0)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.productCategoryTags);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"value\", (ctx.parent == null ? null : ctx.parent.name) || \"root\");\n      }\n    },\n    directives: [i3.MatDialogTitle, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i3.MatDialogContent, i4.DefaultFlexDirective, i4.DefaultLayoutDirective, i5.MatFormField, i5.MatLabel, i1.DefaultValueAccessor, i6.MatInput, i1.NgControlStatus, i1.FormControlName, i7.MatChipList, i8.NgForOf, i7.MatChip, i9.MatIcon, i7.MatChipRemove, i10.MatAutocompleteTrigger, i7.MatChipInput, i1.FormControlDirective, i10.MatAutocomplete, i11.MatOption, i3.MatDialogActions, i12.MatButton, i3.MatDialogClose],\n    styles: [\"\"]\n  });\n  return ProductCategoryComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}