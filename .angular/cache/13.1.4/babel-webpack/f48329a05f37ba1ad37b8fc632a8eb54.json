{"ast":null,"code":"var QuoteService_1;\nimport { __decorate, __param } from \"tslib\";\nimport { NgxsBaseDataRepository } from '../+redux/base-redux.service';\nimport { DataAction, Payload, StateRepository } from '@angular-ru/ngxs/decorators';\nimport produce from 'immer';\nimport { Selector, State } from '@ngxs/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./quote-endpoint.service\";\nimport * as i2 from \"@ngxs/store\";\nlet QuoteService = QuoteService_1 = class QuoteService extends NgxsBaseDataRepository {\n  constructor(endpoint, store) {\n    super();\n    this.endpoint = endpoint;\n    this.store = store;\n  }\n\n  static currentQuote(state) {\n    return state.currentQuote;\n  }\n\n  get currentQuote$() {\n    return this.store.select(QuoteService_1.currentQuote);\n  }\n\n  get currentQuote() {\n    return this.store.selectSnapshot(QuoteService_1.currentQuote);\n  }\n\n  search(input) {\n    return this.endpoint.search(input);\n  }\n\n  add(request) {\n    return this.endpoint.add(request);\n  }\n\n  update(request) {\n    return this.endpoint.update(request);\n  }\n\n  get(id) {\n    return this.endpoint.get(id);\n  }\n\n  setCurrentQuote(quote) {\n    this.ctx.setState(produce(this.ctx.getState(), draft => {\n      draft.currentQuote = quote;\n    }));\n    return this.snapshot.currentQuote;\n  }\n\n};\n\nQuoteService.ɵfac = function QuoteService_Factory(t) {\n  return new (t || QuoteService)(i0.ɵɵinject(i1.QuoteEndpointService), i0.ɵɵinject(i2.Store));\n};\n\nQuoteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QuoteService,\n  factory: QuoteService.ɵfac\n});\n\n__decorate([DataAction(), __param(0, Payload('quote'))], QuoteService.prototype, \"setCurrentQuote\", null);\n\n__decorate([Selector()], QuoteService, \"currentQuote\", null);\n\nQuoteService = QuoteService_1 = __decorate([StateRepository(), State({\n  name: 'quoteState',\n  defaults: {\n    currentQuote: null\n  }\n})], QuoteService);\nexport { QuoteService };","map":null,"metadata":{},"sourceType":"module"}