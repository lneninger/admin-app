{"ast":null,"code":"import { __awaiter, __decorate, __param } from \"tslib\";\nimport { NgxsBaseDataRepository } from '../+redux/base-redux.service';\nimport { firstValueFrom } from 'rxjs';\nimport { DataAction, Payload, StateRepository } from '@angular-ru/ngxs/decorators';\nimport produce from 'immer';\nimport { State } from '@ngxs/store';\nimport { first } from 'rxjs/operators';\nimport { limit, orderBy, query, startAfter } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/firebase/firebase.service\";\nlet ProductService = class ProductService extends NgxsBaseDataRepository {\n  constructor(firebaseService) {\n    super();\n    this.firebaseService = firebaseService;\n    this.productTags = ['HARDGOOD', 'FOOD', 'FLOWER', 'COMPOSITION'];\n  }\n\n  search(input) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const collection = this.firebaseService.firestoreNew.collection('app-products');\n      let ref = collection.ref;\n      let queryObj = query(ref);\n\n      if (input.sort) {\n        queryObj = query(ref, orderBy(input.sort.field));\n      }\n      /*Where clause*/\n\n\n      let total;\n\n      if (input.retrieveTotalAmount) {\n        total = (yield ref.get()).size;\n      }\n\n      queryObj = query(queryObj, limit(input.pageSize));\n      queryObj = input.lastRetrieved ? query(queryObj, startAfter(input.lastRetrieved)) : queryObj;\n      const result = yield firstValueFrom(collection.get());\n      return {\n        total,\n        result\n      };\n    });\n  } // Leonardo\n  // formatTreeData(items: IProductItem[], parent: IProductItem = null) {\n  //   // debugger\n  //   // Leonardo\n  //   const children = items.filter(item => item.parentId == (parent && parent.id));\n  //   if (parent) {\n  //     parent.children = children;\n  //   }\n  //   children.forEach(child => {\n  //     child.treeLevel = (parent && parent.treeLevel || 0) + 1;\n  //     this.formatTreeData(items, child);\n  //   });\n  //   if (parent) {\n  //     children.forEach(child => {\n  //       items.splice(items.findIndex(item => item == child), 1);\n  //     });\n  //   }\n  //   return items;\n  // }\n\n\n  list() {\n    return this.firebaseService.firestoreNew.collection('app-products').snapshotChanges();\n  }\n\n  get(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.firebaseService.firestoreNew.collection('app-products').doc(id).get().pipe(first()).toPromise();\n    });\n  }\n\n  add(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.firebaseService.firestoreNew.collection('app-products').add(request);\n    });\n  }\n\n  delete(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.firebaseService.firestoreNew.collection('app-products').doc(id).delete();\n    });\n  }\n\n  setCurrent(product) {\n    this.ctx.setState(produce(this.ctx.getState(), draft => {\n      draft.currentProduct = product;\n    }));\n    return this.snapshot.currentProduct;\n  }\n\n};\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.FirebaseService));\n};\n\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac\n});\n\n__decorate([DataAction(), __param(0, Payload('category'))], ProductService.prototype, \"setCurrent\", null);\n\nProductService = __decorate([StateRepository(), State({\n  name: 'productState',\n  defaults: {}\n})], ProductService);\nexport { ProductService };","map":null,"metadata":{},"sourceType":"module"}