{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { combineLatest, of } from 'rxjs';\nimport { catchError, debounceTime, startWith, switchMap } from 'rxjs/operators';\nexport class GridConfig {\n  constructor(dataRetriever) {\n    this.dataRetriever = dataRetriever;\n    this.force$ = new EventEmitter();\n  }\n\n  initialize(paginator, sort) {\n    this.sort = sort;\n    this.paginator = paginator;\n    const internalSortChange = this.sort ? this.sort.sortChange : new EventEmitter();\n    const internalPaginatorPage = this.paginator ? this.paginator.page : new EventEmitter();\n    combineLatest([internalSortChange.pipe(startWith(null)), internalPaginatorPage.pipe(startWith(null)), this.force$.pipe(startWith(false))]).pipe(debounceTime(250), // tap(([sort, paginator, force]) => {\n    //   console.log(`hit page`)\n    // }),\n    // filter(([sort, paging, force]) => !!force && (!!sort || !!paging)),\n    // tap(([sort, paginator, force]) => {\n    //   console.log(`hit page`)\n    // }),\n    switchMap(([sort, paginator, force]) => {\n      // debugger;\n      this.isLoadingResults = true;\n      const input = {\n        // sort: { field: this.sort && this.sort.active, direction: this.sort && this.sort.direction },\n        pageIndex: this.paginator && this.paginator.pageIndex,\n        pageSize: this.paginator && this.paginator.pageSize,\n        lastRetrieved: this.lastRetrieved,\n        retrieveTotalAmount: true\n      };\n      return this.dataRetriever(input);\n    }), catchError(() => {\n      this.isLoadingResults = false; // Catch if the GitHub API has reached its rate limit. Return empty data.\n\n      this.isRateLimitReached = true;\n      const result = {\n        items: [],\n        totalCount: 0\n      };\n      return of(result);\n    })).subscribe(data => {\n      // debugger\n      this.isLoadingResults = false;\n      this.isRateLimitReached = false;\n      this.lastRetrieved = data && data.items && data.items.length > 0 && data.items[data.items.length - 1];\n      this.resultsLength = data.totalCount || data.length;\n      this.data = data.items || data;\n      this.paginator.length = data && data.items && data.items.length === this.paginator.pageSize ? this.paginator.pageIndex * this.paginator.pageSize + 1 : this.paginator.pageIndex * this.paginator.pageSize;\n    });\n  }\n\n  refresh() {\n    this.force$.emit(true);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}