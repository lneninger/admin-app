{"ast":null,"code":"import { __decorate, __awaiter } from 'tslib';\nimport { Injectable, EventEmitter, Input, Output, Component, HostBinding, HostListener, Directive, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nclass PlaidLinkHandler {\n  /**\n   * Constructor configures the Plaid Link handler with given config options.\n   * @param PlaidConfig config\n   */\n  constructor(config) {\n    this.plaidLink = Plaid.create(config);\n  }\n  /**\n   * Open the Plaid Link window for this handler.\n   * @param string institution The name of the institution to open\n   */\n\n\n  open(institution) {\n    this.plaidLink.open(institution);\n  }\n  /**\n   * Closes the currently open Plaid Link window if any.\n   */\n\n\n  exit() {\n    this.plaidLink.exit();\n  }\n\n}\n\nlet NgxPlaidLinkService = /*#__PURE__*/(() => {\n  let NgxPlaidLinkService = class NgxPlaidLinkService {\n    constructor() {}\n    /**\n     * Create a Plaid Link instance as soon as Plaid Link has loaded.\n     * @param PlaidConfig config\n     * @returns Promise<PlaidLinkHandler>\n     */\n\n\n    createPlaid(config) {\n      return this.loadPlaid().then(() => {\n        return new PlaidLinkHandler(config);\n      });\n    }\n    /**\n     * Load or wait for the Plaid Link library to load.\n     * @returns Promise<void>\n     */\n\n\n    loadPlaid() {\n      if (!this.loaded) {\n        this.loaded = new Promise((resolve, reject) => {\n          const script = document.createElement('script');\n          script.type = 'text/javascript';\n          script.src = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';\n\n          script.onerror = e => reject(e);\n\n          if (script.readyState) {\n            script.onreadystatechange = () => {\n              if (script.readyState === 'loaded' || script.readyState === 'complete') {\n                script.onreadystatechange = null;\n                resolve();\n              }\n            };\n          } else {\n            script.onload = () => {\n              resolve();\n            };\n          }\n\n          document.getElementsByTagName('body')[0].appendChild(script);\n        });\n      }\n\n      return this.loaded;\n    }\n\n  };\n\n  NgxPlaidLinkService.ɵfac = function NgxPlaidLinkService_Factory(t) {\n    return new (t || NgxPlaidLinkService)();\n  };\n\n  NgxPlaidLinkService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NgxPlaidLinkService,\n    factory: function (t) {\n      return NgxPlaidLinkService.ɵfac(t);\n    }\n  });\n  return NgxPlaidLinkService;\n})();\n\nfunction getWindow() {\n  return window;\n}\n\nlet NgxPlaidLinkButtonComponent = /*#__PURE__*/(() => {\n  let NgxPlaidLinkButtonComponent = class NgxPlaidLinkButtonComponent {\n    constructor() {\n      this.Event = new EventEmitter();\n      this.Success = new EventEmitter();\n      this.Click = new EventEmitter();\n      this.Load = new EventEmitter();\n      this.Exit = new EventEmitter();\n      this.defaultProps = {\n        apiVersion: \"v2\",\n        env: \"sandbox\",\n        institution: null,\n        selectAccount: false,\n        token: null,\n        publicKey: null,\n        webhook: \"\",\n        product: [\"auth\"],\n        countryCodes: [\"US\"],\n        style: {\n          \"background-color\": \"#0085e4\",\n          \"transition-duration\": \"350ms\",\n          \"transition-property\": \"background-color, box-shadow\",\n          \"transition-timing-function\": \"ease-in-out\",\n          \"-webkit-appearance\": \"button\",\n          border: \"0\",\n          \"border-radius\": \"4px\",\n          \"box-shadow\": \"0 2px 4px 0 rgba(0,0,0,0.1), inset 0 1px 0 0 rgba(255,255,255,0.1)\",\n          color: \"#fff\",\n          \"font-size\": \"20px\",\n          height: \"56px\",\n          outline: \"0\",\n          \"text-align\": \"center\",\n          \"text-transform\": \"none\",\n          padding: \"0 2em\",\n          cursor: \"pointer\"\n        },\n        buttonText: \"Log In To Your Bank Account\",\n        className: \"plaid-link-button\"\n      };\n      this.publicKey = this.defaultProps.publicKey;\n      this.apiVersion = this.defaultProps.apiVersion;\n      this.env = this.defaultProps.env;\n      this.institution = this.defaultProps.institution;\n      this.product = this.defaultProps.product;\n      this.selectAccount = this.defaultProps.selectAccount;\n      this.token = this.defaultProps.token;\n      this.webhook = this.defaultProps.webhook;\n      this.countryCodes = this.defaultProps.countryCodes;\n      this.style = this.defaultProps.style;\n      this.buttonText = this.defaultProps.buttonText;\n      this.className = this.defaultProps.className;\n    }\n\n    get nativeWindow() {\n      return getWindow();\n    }\n\n    onScriptError() {\n      console.error(\"There was an issue loading the link-initialize.js script\");\n    }\n\n    onDirectiveSuccess(event) {\n      this.Success.emit(event);\n    }\n\n    onDirectiveExit(event) {\n      this.Exit.emit(event);\n    }\n\n    onDirectiveLoad(event) {\n      this.Load.emit(event);\n    }\n\n    onDirectiveEvent(event) {\n      this.Event.emit(event);\n    }\n\n    onDirectiveClick(event) {\n      this.Click.emit(event);\n    }\n\n  };\n\n  NgxPlaidLinkButtonComponent.ɵfac = function NgxPlaidLinkButtonComponent_Factory(t) {\n    return new (t || NgxPlaidLinkButtonComponent)();\n  };\n\n  NgxPlaidLinkButtonComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxPlaidLinkButtonComponent,\n    selectors: [[\"mr-ngx-plaid-link-button\"]],\n    inputs: {\n      publicKey: \"publicKey\",\n      apiVersion: \"apiVersion\",\n      env: \"env\",\n      institution: \"institution\",\n      product: \"product\",\n      selectAccount: \"selectAccount\",\n      token: \"token\",\n      webhook: \"webhook\",\n      countryCodes: \"countryCodes\",\n      style: \"style\",\n      buttonText: \"buttonText\",\n      className: \"className\",\n      clientName: \"clientName\"\n    },\n    outputs: {\n      Event: \"Event\",\n      Success: \"Success\",\n      Click: \"Click\",\n      Load: \"Load\",\n      Exit: \"Exit\"\n    },\n    decls: 2,\n    vars: 14,\n    consts: [[\"ngxPlaidLink\", \"\", 3, \"ngStyle\", \"publicKey\", \"clientName\", \"apiVersion\", \"env\", \"institution\", \"product\", \"selectAccount\", \"token\", \"webhook\", \"countryCodes\", \"Success\", \"Exit\", \"Load\", \"Event\", \"Click\"]],\n    template: function NgxPlaidLinkButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"Success\", function NgxPlaidLinkButtonComponent_Template_button_Success_0_listener($event) {\n          return ctx.onDirectiveSuccess($event);\n        })(\"Exit\", function NgxPlaidLinkButtonComponent_Template_button_Exit_0_listener($event) {\n          return ctx.onDirectiveExit($event);\n        })(\"Load\", function NgxPlaidLinkButtonComponent_Template_button_Load_0_listener($event) {\n          return ctx.onDirectiveLoad($event);\n        })(\"Event\", function NgxPlaidLinkButtonComponent_Template_button_Event_0_listener($event) {\n          return ctx.onDirectiveEvent($event);\n        })(\"Click\", function NgxPlaidLinkButtonComponent_Template_button_Click_0_listener($event) {\n          return ctx.onDirectiveClick($event);\n        });\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.className);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.style)(\"publicKey\", ctx.publicKey)(\"clientName\", ctx.clientName)(\"apiVersion\", ctx.apiVersion)(\"env\", ctx.env)(\"institution\", ctx.institution)(\"product\", ctx.product)(\"selectAccount\", ctx.selectAccount)(\"token\", ctx.token)(\"webhook\", ctx.webhook)(\"countryCodes\", ctx.countryCodes);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.buttonText, \" \");\n      }\n    },\n    directives: function () {\n      return [NgxPlaidLinkDirective, ɵngcc1.NgStyle];\n    },\n    encapsulation: 2\n  });\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"clientName\", void 0);\n\n  __decorate([Output()], NgxPlaidLinkButtonComponent.prototype, \"Event\", void 0);\n\n  __decorate([Output()], NgxPlaidLinkButtonComponent.prototype, \"Success\", void 0);\n\n  __decorate([Output()], NgxPlaidLinkButtonComponent.prototype, \"Click\", void 0);\n\n  __decorate([Output()], NgxPlaidLinkButtonComponent.prototype, \"Load\", void 0);\n\n  __decorate([Output()], NgxPlaidLinkButtonComponent.prototype, \"Exit\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"publicKey\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"apiVersion\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"env\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"institution\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"product\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"selectAccount\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"token\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"webhook\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"countryCodes\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"style\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"buttonText\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkButtonComponent.prototype, \"className\", void 0);\n\n  return NgxPlaidLinkButtonComponent;\n})();\n\nfunction getWindow$1() {\n  return window;\n}\n\nlet NgxPlaidLinkDirective = /*#__PURE__*/(() => {\n  let NgxPlaidLinkDirective = class NgxPlaidLinkDirective {\n    constructor(plaidLinkLoader) {\n      this.plaidLinkLoader = plaidLinkLoader;\n      this.Event = new EventEmitter();\n      this.Click = new EventEmitter();\n      this.Load = new EventEmitter();\n      this.Exit = new EventEmitter();\n      this.Success = new EventEmitter();\n      this.defaultProps = {\n        apiVersion: \"v2\",\n        env: \"sandbox\",\n        institution: null,\n        selectAccount: false,\n        publicKey: null,\n        token: null,\n        webhook: \"\",\n        product: [\"auth\"],\n        countryCodes: [\"US\"]\n      };\n      this.publicKey = this.defaultProps.publicKey;\n      this.apiVersion = this.defaultProps.apiVersion;\n      this.env = this.defaultProps.env;\n      this.institution = this.defaultProps.institution;\n      this.product = this.defaultProps.product;\n      this.selectAccount = this.defaultProps.selectAccount;\n      this.token = this.defaultProps.token;\n      this.webhook = this.defaultProps.webhook;\n      this.countryCodes = this.defaultProps.countryCodes;\n      this.disabledButton = true;\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let handler = yield this.plaidLinkLoader.createPlaid({\n          env: this.env,\n          key: this.publicKey,\n          product: this.product,\n          apiVersion: \"v2\",\n          clientName: this.clientName,\n          countryCodes: this.countryCodes,\n          onSuccess: (public_token, metadata) => this.onSuccess(public_token, metadata),\n          onExit: (err, metadata) => this.onExit(err, metadata),\n          onEvent: (eventName, metadata) => this.onEvent(eventName, metadata),\n          onLoad: () => this.onLoad(),\n          selectAccount: this.selectAccount,\n          token: this.token || null,\n          webhook: this.webhook || null\n        });\n        this.disabledButton = false;\n        this.plaidLinkHandler = handler;\n      });\n    }\n\n    onExit(error, metadata) {\n      this.Exit.emit({\n        error,\n        metadata\n      });\n    }\n\n    onEvent(eventName, metadata) {\n      this.Event.emit({\n        eventName,\n        metadata\n      });\n    }\n\n    onSuccess(token, metadata) {\n      this.Success.emit({\n        token,\n        metadata\n      });\n    }\n\n    onClick($event) {\n      this.Click.emit($event); // Open to a specific institution if necessary;\n\n      const institution = this.institution || null;\n\n      if (this.plaidLinkHandler) {\n        this.plaidLinkHandler.open(institution);\n      }\n    }\n\n    onLoad($event = \"link_loaded\") {\n      this.Load.emit($event);\n    }\n\n  };\n\n  NgxPlaidLinkDirective.ɵfac = function NgxPlaidLinkDirective_Factory(t) {\n    return new (t || NgxPlaidLinkDirective)(ɵngcc0.ɵɵdirectiveInject(NgxPlaidLinkService));\n  };\n\n  NgxPlaidLinkDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgxPlaidLinkDirective,\n    selectors: [[\"\", \"ngxPlaidLink\", \"\"]],\n    hostVars: 1,\n    hostBindings: function NgxPlaidLinkDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NgxPlaidLinkDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabledButton);\n      }\n    },\n    inputs: {\n      publicKey: \"publicKey\",\n      apiVersion: \"apiVersion\",\n      env: \"env\",\n      institution: \"institution\",\n      product: \"product\",\n      selectAccount: \"selectAccount\",\n      token: \"token\",\n      webhook: \"webhook\",\n      countryCodes: \"countryCodes\",\n      clientName: \"clientName\"\n    },\n    outputs: {\n      Event: \"Event\",\n      Click: \"Click\",\n      Load: \"Load\",\n      Exit: \"Exit\",\n      Success: \"Success\"\n    }\n  });\n\n  __decorate([Output()], NgxPlaidLinkDirective.prototype, \"Event\", void 0);\n\n  __decorate([Output()], NgxPlaidLinkDirective.prototype, \"Click\", void 0);\n\n  __decorate([Output()], NgxPlaidLinkDirective.prototype, \"Load\", void 0);\n\n  __decorate([Output()], NgxPlaidLinkDirective.prototype, \"Exit\", void 0);\n\n  __decorate([Output()], NgxPlaidLinkDirective.prototype, \"Success\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkDirective.prototype, \"clientName\", void 0);\n\n  __decorate([HostBinding('disabled')], NgxPlaidLinkDirective.prototype, \"disabledButton\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkDirective.prototype, \"publicKey\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkDirective.prototype, \"apiVersion\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkDirective.prototype, \"env\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkDirective.prototype, \"institution\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkDirective.prototype, \"product\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkDirective.prototype, \"selectAccount\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkDirective.prototype, \"token\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkDirective.prototype, \"webhook\", void 0);\n\n  __decorate([Input()], NgxPlaidLinkDirective.prototype, \"countryCodes\", void 0);\n\n  __decorate([HostListener('click', ['$event'])], NgxPlaidLinkDirective.prototype, \"onClick\", null);\n\n  return NgxPlaidLinkDirective;\n})();\nlet NgxPlaidLinkModule = /*#__PURE__*/(() => {\n  let NgxPlaidLinkModule = class NgxPlaidLinkModule {};\n\n  NgxPlaidLinkModule.ɵfac = function NgxPlaidLinkModule_Factory(t) {\n    return new (t || NgxPlaidLinkModule)();\n  };\n\n  NgxPlaidLinkModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxPlaidLinkModule\n  });\n  NgxPlaidLinkModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [NgxPlaidLinkService],\n    imports: [[CommonModule]]\n  });\n  return NgxPlaidLinkModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPlaidLinkModule, {\n    declarations: function () {\n      return [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective];\n    }\n  });\n})();\n/*\n * Public API Surface of ngx-plaid-link\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgxPlaidLinkButtonComponent, NgxPlaidLinkDirective, NgxPlaidLinkModule, NgxPlaidLinkService, PlaidLinkHandler }; //# sourceMappingURL=ngx-plaid-link.js.map","map":null,"metadata":{},"sourceType":"module"}