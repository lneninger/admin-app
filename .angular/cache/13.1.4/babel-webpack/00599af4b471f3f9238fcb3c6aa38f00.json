{"ast":null,"code":"var UserService_1;\nimport { __awaiter, __decorate } from \"tslib\";\nimport { DataAction, StateRepository } from '@angular-ru/ngxs/decorators';\nimport { NgxsDataRepository } from '@angular-ru/ngxs/repositories';\nimport { Selector, State } from '@ngxs/store';\nimport produce from 'immer';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/firebase/firebase.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ngxs/store\";\nimport * as i4 from \"src/app/shared/payment/+services/payment.service\";\nlet UserService = UserService_1 = class UserService extends NgxsDataRepository {\n  constructor(firebaseService, router, store, paymentService) {\n    super();\n    this.firebaseService = firebaseService;\n    this.router = router;\n    this.store = store;\n    this.paymentService = paymentService;\n  }\n\n  static userRoles(state) {\n    return state.roles;\n  }\n\n  static currentRole(state) {\n    return state.currentRole;\n  }\n\n  static paymentMetadata(state) {\n    return state.paymentMetadata;\n  }\n\n  get isAuthenticated() {\n    return true; // return this.adalSvc.isAuthenticated;\n  }\n\n  get user() {\n    return this.store.selectSnapshot(selector => selector.authState.user);\n  }\n\n  get paymentMetadata() {\n    return this.store.selectSnapshot(UserService_1.paymentMetadata);\n  }\n\n  get paymentMetadata$() {\n    return this.store.select(UserService_1.paymentMetadata);\n  }\n\n  ngxsAfterBootstrap() {\n    const _super = Object.create(null, {\n      ngxsAfterBootstrap: {\n        get: () => super.ngxsAfterBootstrap\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      _super.ngxsAfterBootstrap.call(this);\n\n      yield this.getRoles();\n      this.firebaseService.auth.authState.subscribe(user => {\n        if (user) {\n          this.getMetadata();\n        }\n      });\n    });\n  }\n\n  getMetadata() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const user = yield this.firebaseService.auth.currentUser;\n      const extraData = (yield this.firebaseService.firestore.doc(`/entities/${user.uid}`).get().pipe(first()).toPromise()).data();\n      this.ctx.setState(produce(this.ctx.getState(), draft => {\n        draft.paymentMetadata = extraData;\n      }));\n    });\n  }\n\n  createUser(email, password, phoneNumber, photoURL, metadata) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // return this.fns.httpsCallable('userCreate')(user);\n      let error;\n\n      try {\n        const userCreateResponse = yield this.firebaseService.auth.createUserWithEmailAndPassword(email, password);\n        console.log(\"You have been successfully registered!\");\n        console.log(userCreateResponse); // if(user.phoneNumber){\n        //   userCreateResponse.user.\n        //   userCreateResponse.user.phoneNumber = user.phoneNumber;\n        //   userCreateResponse.user.updatePhoneNumber(userCreateResponse);\n        // }\n\n        try {\n          yield userCreateResponse.user.updateProfile({\n            displayName: JSON.stringify(metadata),\n            photoURL: photoURL\n          });\n          yield userCreateResponse.user.sendEmailVerification(); //Send email verification\n\n          yield this.firebaseService.auth.signOut(); //Logout is triggered --> line 16 in app.js\n\n          return userCreateResponse;\n        } catch (error) {\n          window.alert(error.message);\n          throw error;\n        }\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n  getRoles() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const roles = yield yield this.firebaseService.firestore.collection('auth-roles').get();\n      this.ctx.setState(produce(this.ctx.getState(), draft => {// draft.roles = roles as string[];\n      }));\n      return roles;\n    });\n  }\n\n  attachRole(userId, roleName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const attachRole = this.firebaseService.fns.httpsCallable('attachRole');\n      return yield attachRole({\n        uid: userId,\n        role: roleName\n      }).pipe(first()).toPromise();\n    });\n  }\n\n  setCurentRole(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const setCurrentRole = this.firebaseService.fns.httpsCallable('setCurrentRole');\n      return yield setCurrentRole({\n        name: value\n      }).pipe(first()).toPromise();\n    });\n  }\n\n};\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.FirebaseService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.PaymentService));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});\n\n__decorate([DataAction()], UserService.prototype, \"getMetadata\", null);\n\n__decorate([DataAction()], UserService.prototype, \"getRoles\", null);\n\n__decorate([Selector()], UserService, \"userRoles\", null);\n\n__decorate([Selector()], UserService, \"currentRole\", null);\n\n__decorate([Selector()], UserService, \"paymentMetadata\", null);\n\nUserService = UserService_1 = __decorate([StateRepository(), State({\n  name: 'userState',\n  defaults: {\n    roles: []\n  }\n})], UserService);\nexport { UserService };","map":null,"metadata":{},"sourceType":"module"}