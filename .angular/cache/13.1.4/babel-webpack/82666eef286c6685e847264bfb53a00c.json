{"ast":null,"code":"var AuthService_1;\nimport { __awaiter, __decorate, __param } from \"tslib\";\nimport { DataAction, Payload, Persistence, StateRepository } from '@angular-ru/ngxs/decorators';\nimport { NgxsDataRepository } from '@angular-ru/ngxs/repositories';\nimport { Selector, State } from '@ngxs/store';\nimport firebase from 'firebase/app';\nimport produce from 'immer';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/firebase/firebase.service\";\nimport * as i2 from \"@ngxs/store\";\nexport const LoginErrorCodes = {\n  TOKEN_EXPIRED: `The user's credential is no longer valid. The user must sign in again.`,\n  USER_DISABLED: `The user account has been disabled by an administrator.`,\n  USER_NOT_FOUND: `The user corresponding to the refresh token was not found. It is likely the user was deleted.\nAPI key not valid. Please pass a valid API key. (invalid API key provided)`,\n  INVALID_REFRESH_TOKEN: `An invalid refresh token is provided.`,\n  'Invalid JSON payload received': `Unknown name \\\"refresh_tokens\\\": Cannot bind query parameter. Field 'refresh_tokens' could not be found in request message.`,\n  INVALID_GRANT_TYPE: `The grant type specified is invalid.`,\n  MISSING_REFRESH_TOKEN: `No refresh token provided.`\n};\nlet AuthService = AuthService_1 = class AuthService extends NgxsDataRepository {\n  constructor(firebaseService, store) {\n    super();\n    this.firebaseService = firebaseService;\n    this.store = store;\n    this.user$ = this.firebaseService.auth.authState;\n  } // claims: IUserClaims;\n\n\n  static credentials(state) {\n    return state.userCredential;\n  }\n\n  static claims(state) {\n    return state.claims;\n  }\n\n  get claims() {\n    return this.store.selectSnapshot(AuthService_1.claims);\n  }\n\n  get credentials() {\n    return this.store.selectSnapshot(AuthService_1.credentials);\n  }\n\n  login(userLogin) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const userCredential = yield this.firebaseService.auth.signInWithEmailAndPassword(userLogin.userName, userLogin.password);\n        yield this.setUserCredential(userCredential);\n        return userCredential.user;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n  loginForProvider(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const userCredential = yield this.firebaseService.auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n        return userCredential.user;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n  isLoggedIn() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.firebaseService.auth.authState.pipe(first()).toPromise();\n    });\n  }\n\n  logout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield this.firebaseService.auth.signOut();\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n  setUserCredential(userCredential) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tokenResult = yield userCredential.user.getIdTokenResult();\n      const claims = tokenResult.claims;\n      this.ctx.setState(produce(this.ctx.getState(), draft => {\n        draft.userCredential = userCredential;\n        draft.claims = claims;\n      }));\n    });\n  }\n\n};\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.FirebaseService), i0.ɵɵinject(i2.Store));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac\n});\n\n__decorate([DataAction(), __param(0, Payload('userCredential'))], AuthService.prototype, \"setUserCredential\", null);\n\n__decorate([Selector()], AuthService, \"credentials\", null);\n\n__decorate([Selector()], AuthService, \"claims\", null);\n\nAuthService = AuthService_1 = __decorate([Persistence({\n  existingEngine: sessionStorage\n}), StateRepository(), State({\n  name: 'authState',\n  defaults: {}\n})], AuthService);\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module"}