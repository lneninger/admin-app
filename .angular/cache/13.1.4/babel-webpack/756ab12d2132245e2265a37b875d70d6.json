{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { LazyLoadedWidgets } from 'src/app/app-routing-lazy';\nimport { BaseComponent } from '../base.component';\nimport { LazyLoaderDirective } from './lazy-loader.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./lazy-loader.service\";\nexport let LazyLoaderBaseComponent = /*#__PURE__*/(() => {\n  class LazyLoaderBaseComponent extends BaseComponent {\n    constructor(lazyLoaderService) {\n      super();\n      this.lazyLoaderService = lazyLoaderService;\n      this.LazyLoadedWidgets = LazyLoadedWidgets;\n      this._lazyComponentDirectives$ = new BehaviorSubject(null);\n    }\n\n    set lazyComponentDirectives(value) {\n      this._lazyComponentDirectives = value && value.toArray();\n\n      if (this._lazyComponentDirectives) {\n        this._lazyComponentDirectives$.next(this._lazyComponentDirectives);\n      }\n    }\n\n    ngAfterViewInit() {\n      this.initializeListener();\n    }\n\n    initializeListener() {\n      this.lazyLoaderService.processDirectives(this._lazyComponentDirectives$.value);\n      this.lazyLoader$$ = this._lazyComponentDirectives$.asObservable().subscribe(views => this.lazyLoaderService.processDirectives(views));\n    }\n\n  }\n\n  LazyLoaderBaseComponent.ɵfac = function LazyLoaderBaseComponent_Factory(t) {\n    return new (t || LazyLoaderBaseComponent)(i0.ɵɵdirectiveInject(i1.LazyLoaderService));\n  };\n\n  LazyLoaderBaseComponent.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: LazyLoaderBaseComponent,\n    viewQuery: function LazyLoaderBaseComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(LazyLoaderDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lazyComponentDirectives = _t);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return LazyLoaderBaseComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}