{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, ɵmemoizeInstance, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone } from '@angular/core';\nimport { isSupported as isSupported$1, getAnalytics as getAnalytics$1, initializeAnalytics as initializeAnalytics$1, logEvent as logEvent$1, setAnalyticsCollectionEnabled as setAnalyticsCollectionEnabled$1, setCurrentScreen as setCurrentScreen$1, settings as settings$1, setUserId as setUserId$1, setUserProperties as setUserProperties$1 } from 'firebase/analytics';\nexport * from 'firebase/analytics';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\n\nclass Analytics {\n  constructor(analytics) {\n    return analytics;\n  }\n\n}\n\nconst ANALYTICS_PROVIDER_NAME = 'analytics';\n\nclass AnalyticsInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(ANALYTICS_PROVIDER_NAME);\n  }\n\n}\n\nconst analyticInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe( /*#__PURE__*/concatMap(() => from(ɵgetAllInstancesOf(ANALYTICS_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_ANALYTICS_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.analytics-instances');\nconst IS_SUPPORTED = /*#__PURE__*/new InjectionToken('angularfire2.analytics.isSupported');\nconst isSupportedSymbol = /*#__PURE__*/Symbol('angularfire2.analytics.isSupported');\n\nfunction defaultAnalyticsInstanceFactory(isSupported, provided, defaultApp) {\n  const defaultAnalytics = isSupported ? ɵgetDefaultInstanceOf(ANALYTICS_PROVIDER_NAME, provided, defaultApp) : undefined;\n  return new Analytics(defaultAnalytics);\n}\n\nfunction analyticsInstanceFactory(fn) {\n  return (zone, isSupported) => {\n    const analytics = isSupported ? ɵmemoizeInstance(fn, zone) : undefined;\n    return new Analytics(analytics);\n  };\n}\n\nconst ANALYTICS_INSTANCES_PROVIDER = {\n  provide: AnalyticsInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_ANALYTICS_INSTANCES]]\n};\nconst DEFAULT_ANALYTICS_INSTANCE_PROVIDER = {\n  provide: Analytics,\n  useFactory: defaultAnalyticsInstanceFactory,\n  deps: [IS_SUPPORTED, [/*#__PURE__*/new Optional(), PROVIDED_ANALYTICS_INSTANCES], FirebaseApp]\n};\nlet AnalyticsModule = /*#__PURE__*/(() => {\n  class AnalyticsModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'analytics');\n    }\n\n  }\n\n  AnalyticsModule.ɵfac = function AnalyticsModule_Factory(t) {\n    return new (t || AnalyticsModule)();\n  };\n\n  AnalyticsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AnalyticsModule\n  });\n  AnalyticsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_ANALYTICS_INSTANCE_PROVIDER, ANALYTICS_INSTANCES_PROVIDER, {\n      provide: APP_INITIALIZER,\n      useValue: () => isSupported$1().then(it => globalThis[isSupportedSymbol] = it),\n      multi: true\n    }]\n  });\n  return AnalyticsModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction provideAnalytics(fn) {\n  return {\n    ngModule: AnalyticsModule,\n    providers: [{\n      provide: IS_SUPPORTED,\n      useFactory: () => globalThis[isSupportedSymbol]\n    }, {\n      provide: PROVIDED_ANALYTICS_INSTANCES,\n      useFactory: analyticsInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, IS_SUPPORTED, ɵAngularFireSchedulers, FirebaseApps]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst getAnalytics = /*#__PURE__*/ɵzoneWrap(getAnalytics$1, true);\nconst initializeAnalytics = /*#__PURE__*/ɵzoneWrap(initializeAnalytics$1, true);\nconst isSupported = /*#__PURE__*/ɵzoneWrap(isSupported$1, true);\nconst logEvent = /*#__PURE__*/ɵzoneWrap(logEvent$1, true);\nconst setAnalyticsCollectionEnabled = /*#__PURE__*/ɵzoneWrap(setAnalyticsCollectionEnabled$1, true);\nconst setCurrentScreen = /*#__PURE__*/ɵzoneWrap(setCurrentScreen$1, true);\nconst settings = /*#__PURE__*/ɵzoneWrap(settings$1, true);\nconst setUserId = /*#__PURE__*/ɵzoneWrap(setUserId$1, true);\nconst setUserProperties = /*#__PURE__*/ɵzoneWrap(setUserProperties$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Analytics, AnalyticsInstances, AnalyticsModule, analyticInstance$, getAnalytics, initializeAnalytics, isSupported, logEvent, provideAnalytics, setAnalyticsCollectionEnabled, setCurrentScreen, setUserId, setUserProperties, settings }; //# sourceMappingURL=angular-fire-analytics.js.map","map":null,"metadata":{},"sourceType":"module"}