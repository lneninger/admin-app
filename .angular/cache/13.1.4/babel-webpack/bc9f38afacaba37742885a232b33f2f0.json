{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { NavigationItemIds } from 'src/app/main/main.navigation';\nimport { AggregatorsState } from 'src/app/main/services/+state-aggregators/aggregators.state';\nimport { NavigationEnd } from '@angular/router';\nimport { Select } from '@ngxs/store';\nimport { filter, first } from 'rxjs/operators';\nimport { AppInitializerService } from 'src/app/shared/app-initializer/app-initializer.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/layout/layout-main/navigation/menu/menu.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/shared/layout/layout-main/navigation/navigation.service\";\nexport class AppMenuService {\n  constructor(service, route, router, navigationService) {\n    this.service = service;\n    this.route = route;\n    this.router = router;\n    this.navigationService = navigationService;\n    this.initializeListener();\n  }\n\n  initializeListener() {\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => __awaiter(this, void 0, void 0, function* () {\n      const routeSnapshot = this.firstChild(this.route.snapshot);\n      let currentMenuName = this.getMenuName(routeSnapshot);\n      currentMenuName = currentMenuName && currentMenuName.toUpperCase();\n\n      if (!this.currentMenuName || this.currentMenuName != currentMenuName) {\n        this.currentMenuName = currentMenuName;\n\n        switch (this.currentMenuName) {\n          case 'QUOTE':\n            yield this.generateQuoteMenu();\n            break;\n\n          case 'NEW-QUOTE':\n            yield this.generateNewQuoteMenu();\n            break;\n\n          case 'SPECIALIST':\n            yield this.generateSpecialistMenu();\n            break;\n\n          case 'NEW-SPECIALIST':\n            yield this.generateNewSpecialistMenu();\n            break;\n\n          case 'ADMIN':\n            yield this.generateAdminMenu();\n            break;\n\n          case 'SETTINGS':\n            yield this.generateSettingsMenu();\n            break;\n\n          default:\n            yield this.generateGlobalMenu();\n            break;\n        }\n      }\n    }));\n  }\n\n  generateGlobalMenu() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.aggregatorMemberTenantUser$.pipe(first()).toPromise();\n      yield this.service.buildCurrentMenu(NavigationItemIds.DASHBOARD, NavigationItemIds.DIVIDER, NavigationItemIds.QUOTES, NavigationItemIds.SPECIALISTS, NavigationItemIds.PRODUCT_CATEGORIES, NavigationItemIds.PRODUCTS, ...(AppInitializerService.configuration && AppInitializerService.configuration.modules && AppInitializerService.configuration.modules.length ? [NavigationItemIds.DIVIDER, ...this.generateSecuredModuleMenuItems(AppInitializerService.configuration.modules), NavigationItemIds.DIVIDER] : []), // NavigationItemIds.DIVIDER,\n      // NavigationItemIds.QUOTE_CUSTOM_INTERVIEW,\n      // NavigationItemIds.DIVIDER,\n      // NavigationItemIds.QUOTE_NOTES,\n      NavigationItemIds.ADMIN, NavigationItemIds.SETTINGS);\n      console.info(`ended await this.generateGlobalMenu() => `, this.service.currentMenu);\n    });\n  }\n\n  generateSecuredModuleMenuItems(modules) {\n    const navigationItems = modules.map(moduleItem => ({\n      id: moduleItem.name,\n      label: moduleItem.displayName,\n      routerLink: [`/app/secured/${moduleItem.path}`],\n      bottom: false,\n      icon: moduleItem.icon\n    }));\n    this.navigationService.addItem(...navigationItems);\n    return navigationItems.map(item => item.id);\n  }\n\n  generateNewQuoteMenu() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const agreggated = yield this.aggregatorMemberTenantUser$.pipe(first()).toPromise();\n      this.service.buildCurrentMenu(NavigationItemIds.DASHBOARD);\n      console.info(`ended await this.generateNewQuoteMenu() => `, this.service.currentMenu);\n    });\n  }\n\n  generateQuoteMenu() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.aggregatorMemberTenantUser$.pipe(first()).toPromise();\n      this.service.buildCurrentMenu(NavigationItemIds.HOME, NavigationItemIds.DIVIDER, NavigationItemIds.QUOTE_DASHBOARD, NavigationItemIds.DIVIDER, // NavigationItemIds.QUOTE_DOCUMENT,\n      // NavigationItemIds.QUOTE_MEDICAID,\n      // NavigationItemIds.QUOTE_SNAP,\n      // NavigationItemIds.QUOTE_LIS,\n      // NavigationItemIds.QUOTE_VETERAN,\n      // NavigationItemIds.DIVIDER,\n      NavigationItemIds.QUOTE_CALCULATE, NavigationItemIds.QUOTE_DOCUMENTS, NavigationItemIds.QUOTE_NOTES, // NavigationItemIds.DIVIDER,\n      // NavigationItemIds.QUOTE_CUSTOM_INTERVIEW,\n      // NavigationItemIds.DIVIDER,\n      NavigationItemIds.ADMIN);\n      console.info(`ended await this.generateQuoteMenu() => `, this.service.currentMenu);\n    });\n  }\n\n  generateNewSpecialistMenu() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const agreggated = yield this.aggregatorMemberTenantUser$.pipe(first()).toPromise();\n      this.service.buildCurrentMenu(NavigationItemIds.DASHBOARD);\n      console.info(`ended await this.generateNewSpecialistMenu() => `, this.service.currentMenu);\n    });\n  }\n\n  generateSpecialistMenu() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.aggregatorMemberTenantUser$.pipe(first()).toPromise();\n      this.service.buildCurrentMenu(NavigationItemIds.HOME, NavigationItemIds.DIVIDER, NavigationItemIds.QUOTE_DASHBOARD, NavigationItemIds.DIVIDER, // NavigationItemIds.QUOTE_DOCUMENT,\n      // NavigationItemIds.QUOTE_MEDICAID,\n      // NavigationItemIds.QUOTE_SNAP,\n      // NavigationItemIds.QUOTE_LIS,\n      // NavigationItemIds.QUOTE_VETERAN,\n      // NavigationItemIds.DIVIDER,\n      NavigationItemIds.SPECIALIST_DOCUMENTS, NavigationItemIds.SPECIALIST_NOTES, // NavigationItemIds.DIVIDER,\n      // NavigationItemIds.QUOTE_CUSTOM_INTERVIEW,\n      // NavigationItemIds.DIVIDER,\n      NavigationItemIds.ADMIN);\n      console.info(`ended await this.generateSpecialistMenu() => `, this.service.currentMenu);\n    });\n  }\n\n  generateAdminMenu() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.aggregatorMemberTenantUser$.pipe(first()).toPromise();\n      this.service.buildCurrentMenu(NavigationItemIds.HOME, NavigationItemIds.ADMIN_DASHBOARD, NavigationItemIds.DIVIDER, NavigationItemIds.ADMIN_SUBSCRIPTIONS, NavigationItemIds.ADMIN_USERS, NavigationItemIds.ADMIN_ROLES, NavigationItemIds.DIVIDER, NavigationItemIds.PRODUCT_CATEGORIES, NavigationItemIds.PRODUCTS);\n      console.info(`ended await this.generateAdminMenu() => `, this.service.currentMenu);\n    });\n  }\n\n  generateSettingsMenu() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.aggregatorMemberTenantUser$.pipe(first()).toPromise();\n      this.service.buildCurrentMenu(NavigationItemIds.HOME, NavigationItemIds.SETTINGS_DASHBOARD, NavigationItemIds.DIVIDER, NavigationItemIds.SETTINGS_BANKING);\n      console.info(`ended await this.generateSettingsMenu() => `, this.service.currentMenu);\n    });\n  }\n\n  getMenuName(routeSnapshot) {\n    let result = routeSnapshot && routeSnapshot.data && routeSnapshot.data.menu;\n\n    if (result === undefined && routeSnapshot.parent) {\n      result = this.getMenuName(routeSnapshot.parent);\n    }\n\n    return result;\n  }\n\n  firstChild(routeSnapshot) {\n    const result = routeSnapshot && this.firstChild(routeSnapshot.firstChild) || routeSnapshot;\n    return result;\n  }\n\n}\n\nAppMenuService.ɵfac = function AppMenuService_Factory(t) {\n  return new (t || AppMenuService)(i0.ɵɵinject(i1.MenuService), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NavigationService));\n};\n\nAppMenuService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppMenuService,\n  factory: AppMenuService.ɵfac,\n  providedIn: 'root'\n});\n\n__decorate([Select(AggregatorsState.aggregatorMemberTenantUser)], AppMenuService.prototype, \"aggregatorMemberTenantUser$\", void 0);","map":null,"metadata":{},"sourceType":"module"}