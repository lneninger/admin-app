{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Select } from '@ngxs/store';\nimport { BehaviorSubject } from 'rxjs';\nimport { AppConfigState, MenuExpandedToggleAction, MenuToggleAction } from '../../../states/appconfig.state';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../navigation.service\";\nimport * as i2 from \"@ngxs/store\";\nimport * as i3 from \"../../../states/appconfig.state\";\nimport * as i4 from \"src/app/shared/common/media.service\";\nexport class MenuService {\n  constructor(navigationService, store, configState, mediaService) {\n    this.navigationService = navigationService;\n    this.store = store;\n    this.configState = configState;\n    this.mediaService = mediaService;\n    this.showMenuInternal$ = new BehaviorSubject(false);\n    this.showMenu$ = this.showMenuInternal$.asObservable();\n    this.menuFloatInternal$ = new BehaviorSubject(false);\n    this.fullScreenInternal$ = new BehaviorSubject(false);\n  }\n\n  set currentMenu(value) {\n    this._currentMenu = value;\n    console.info(`set currentMenu => `, value);\n  }\n\n  get currentMenu() {\n    return this._currentMenu;\n  }\n\n  get currentMenuTop() {\n    return this._currentMenu && this._currentMenu.filter(item => !item.bottom);\n  }\n\n  get currentMenuBottom() {\n    return this._currentMenu && this._currentMenu.filter(item => item.bottom);\n  }\n\n  initialize(menuDrawer, optionsDrawer) {}\n\n  build(...ids) {\n    return this.navigationService.build(...ids);\n  }\n\n  buildCurrentMenu(...ids) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.currentMenu = yield this.navigationService.build(...ids);\n    });\n  }\n\n  updateItems(patch, ids) {\n    ids.forEach(id => {\n      const index = this.currentMenu.findIndex(item => item.id === id);\n\n      if (index >= 0) {\n        let formatted;\n\n        if (typeof patch === 'function') {\n          formatted = patch(this.currentMenu[index]);\n        } else {\n          formatted = patch;\n        }\n\n        this.currentMenu.splice(index, 1, Object.assign(Object.assign({}, this.currentMenu[index]), formatted));\n      }\n    });\n  }\n\n  toggleMenu() {\n    this.store.dispatch(new MenuToggleAction());\n  }\n\n  toggleExpanded() {\n    this.store.dispatch(new MenuExpandedToggleAction());\n  }\n\n  toggleFloat() {\n    let current = this.menuFloatInternal$.value;\n    current = !current;\n    this.menuFloatInternal$.next(current);\n  }\n\n  toggleFullScreen() {\n    let current = this.fullScreenInternal$.value;\n    current = !current;\n    this.fullScreenInternal$.next(current);\n  }\n\n}\n\nMenuService.ɵfac = function MenuService_Factory(t) {\n  return new (t || MenuService)(i0.ɵɵinject(i1.NavigationService), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.AppConfigState), i0.ɵɵinject(i4.MediaService));\n};\n\nMenuService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MenuService,\n  factory: MenuService.ɵfac,\n  providedIn: 'root'\n});\n\n__decorate([Select(AppConfigState.menu)], MenuService.prototype, \"menu$\", void 0);","map":null,"metadata":{},"sourceType":"module"}