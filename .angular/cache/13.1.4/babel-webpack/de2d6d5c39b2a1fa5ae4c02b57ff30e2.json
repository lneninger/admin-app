{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { NgxsBaseDataRepository } from './../+redux/base-redux.service';\nimport { EventEmitter } from '@angular/core';\nimport { DataAction, Payload, StateRepository } from '@angular-ru/ngxs/decorators';\nimport produce from 'immer';\nimport { State } from '@ngxs/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./product-category-endpoint.service.\";\nlet ProductCategoryService = class ProductCategoryService extends NgxsBaseDataRepository {\n  constructor(endpoint) {\n    super();\n    this.endpoint = endpoint;\n    this.productCategoryTags = ['HARDGOOD', 'FOOD', 'FLOWER', 'COMPOSITION'];\n    this.reload$ = new EventEmitter();\n  }\n\n  getAll() {\n    console.log(`Executed getAll!!`);\n    return this.endpoint.getAll();\n  }\n\n  search(input) {\n    return this.endpoint.search(input);\n  }\n\n  formatTreeData(items, parent = null) {\n    // debugger\n    const children = items.filter(item => item.parentId == (parent && parent.id));\n\n    if (parent) {\n      parent.children = children;\n    }\n\n    children.forEach(child => {\n      child.treeLevel = (parent && parent.treeLevel || 0) + 1;\n      this.formatTreeData(items, child);\n    });\n\n    if (parent) {\n      children.forEach(child => {\n        items.splice(items.findIndex(item => item == child), 1);\n      });\n    }\n\n    return items;\n  }\n\n  get(id) {\n    return this.endpoint.get(id);\n  }\n\n  add(request) {\n    return this.endpoint.add(request);\n  }\n\n  delete(id) {\n    return this.endpoint.delete(id);\n  }\n\n  setCurrent(category) {\n    this.ctx.setState(produce(this.ctx.getState(), draft => {\n      draft.currentCategory = category;\n    }));\n    return this.snapshot.currentCategory;\n  }\n\n};\n\nProductCategoryService.ɵfac = function ProductCategoryService_Factory(t) {\n  return new (t || ProductCategoryService)(i0.ɵɵinject(i1.ProductCategoryEndpoint));\n};\n\nProductCategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductCategoryService,\n  factory: ProductCategoryService.ɵfac\n});\n\n__decorate([DataAction(), __param(0, Payload('category'))], ProductCategoryService.prototype, \"setCurrent\", null);\n\nProductCategoryService = __decorate([StateRepository(), State({\n  name: 'productCategoryState',\n  defaults: {}\n})], ProductCategoryService);\nexport { ProductCategoryService };","map":null,"metadata":{},"sourceType":"module"}