{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Persistence, StateRepository } from '@angular-ru/ngxs/decorators';\nimport { NgxsDataRepository } from '@angular-ru/ngxs/repositories';\nimport { State } from '@ngxs/store';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../firebase/firebase.service\";\nimport * as i2 from \"src/app/main/services/user/auth.service\";\nimport * as i3 from \"@ngxs/store\";\nlet PaymentService = class PaymentService extends NgxsDataRepository {\n  constructor(firebase, authService, store, firebaseService) {\n    super();\n    this.firebase = firebase;\n    this.authService = authService;\n    this.store = store;\n    this.firebaseService = firebaseService;\n  }\n\n  static currentPaymentMethodSelector(state) {\n    return state.currentPaymentMethod;\n  }\n\n  get currentPaymentMethod() {\n    return this.snapshot.currentPaymentMethod;\n  }\n\n  ngxsAfterBootstrap() {\n    const _super = Object.create(null, {\n      ngxsAfterBootstrap: {\n        get: () => super.ngxsAfterBootstrap\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      _super.ngxsAfterBootstrap.call(this);\n\n      this.firebaseService.authNew.authState.subscribe(user => __awaiter(this, void 0, void 0, function* () {\n        if (user) {\n          // create customer in stripe. payment api\n          yield this.setCurrentUserAsCustomer();\n        }\n      }));\n    });\n  }\n\n  setCurrentUserAsCustomer() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const req = {\n        userId: this.authService.credentials.user.uid,\n        email: this.authService.credentials.user.email,\n        fullName: this.authService.credentials.user.displayName || this.authService.credentials.user.email\n      };\n      const customerCreateFn = this.firebase.fnsNew.httpsCallable('customerCreate');\n      return customerCreateFn(req).toPromise();\n    });\n  }\n\n  createPlaidToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const req = {\n        appName: environment.appTitle,\n        stripeCustomerId: this.store.selectSnapshot(store => store.userState.paymentMetadata.paymentId)\n      };\n      const customerCreateFn = this.firebase.fnsNew.httpsCallable('plaidToken');\n      return customerCreateFn(req).toPromise();\n    });\n  }\n\n  createPaymentMethod(req) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const paymentMethodCreateFn = this.firebase.fnsNew.httpsCallable('paymentMethodCreate');\n      return paymentMethodCreateFn(req).toPromise();\n    });\n  }\n\n  createBankAccountToken(req) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const createBankAccountFn = this.firebase.fnsNew.httpsCallable('attachBankAccount');\n      return createBankAccountFn(req).toPromise();\n    });\n  }\n\n  createSource(req) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const createSourceFn = this.firebase.fnsNew.httpsCallable('createSource');\n      return createSourceFn(req).toPromise();\n    });\n  }\n\n};\n\nPaymentService.ɵfac = function PaymentService_Factory(t) {\n  return new (t || PaymentService)(i0.ɵɵinject(i1.FirebaseService), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i1.FirebaseService));\n};\n\nPaymentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PaymentService,\n  factory: PaymentService.ɵfac\n});\nPaymentService = __decorate([Persistence({\n  existingEngine: sessionStorage\n}), StateRepository(), State({\n  name: 'paymentState',\n  defaults: {}\n})], PaymentService);\nexport { PaymentService };","map":null,"metadata":{},"sourceType":"module"}