{"ast":null,"code":"import { __awaiter, __decorate, __param } from \"tslib\";\nimport { DataAction, Payload, StateRepository } from '@angular-ru/ngxs/decorators';\nimport { BehaviorSubject } from 'rxjs';\nimport { Selector, State } from '@ngxs/store';\nimport { NgxsDataRepository } from '@angular-ru/ngxs/repositories';\nimport { environment } from 'src/environments/environment';\nimport produce from 'immer';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./tenant-endpoint.service\";\nimport * as i2 from \"@ngxs/store\";\nlet TenantService = class TenantService extends NgxsDataRepository {\n  constructor(endpoint, store) {\n    super();\n    this.endpoint = endpoint;\n    this.store = store;\n    this.tenants$ = new BehaviorSubject(null);\n  }\n\n  static globalTenants(state) {\n    return state.globalTenants;\n  }\n\n  static defaultTenants(state) {\n    const result = state.globalTenants.filter(item => state.defaultTenants.some(defaultItem => defaultItem === item.tenantName));\n    return result;\n  }\n\n  get() {\n    return this.endpoint.get();\n  }\n\n  tenantGet() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const state = this.ctx.getState();\n\n      if (environment.useStorage && ((_a = state === null || state === void 0 ? void 0 : state.globalTenants) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n        return state;\n      } else {\n        const data = yield this.get().toPromise();\n        return this.ctx.setState(produce(this.ctx.getState(), draft => {\n          draft.globalTenants = data;\n        }));\n      }\n    });\n  }\n\n  setDefaultTenants(payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.ctx.setState(produce(this.ctx.getState(), draft => {\n        draft.defaultTenants = payload ? payload.map(item => item.tenantName) : [];\n      }));\n    });\n  }\n\n};\n\nTenantService.ɵfac = function TenantService_Factory(t) {\n  return new (t || TenantService)(i0.ɵɵinject(i1.TenantEndpointService), i0.ɵɵinject(i2.Store));\n};\n\nTenantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TenantService,\n  factory: TenantService.ɵfac\n});\n\n__decorate([DataAction()], TenantService.prototype, \"tenantGet\", null);\n\n__decorate([DataAction(), __param(0, Payload('defaultTenants'))], TenantService.prototype, \"setDefaultTenants\", null);\n\n__decorate([Selector()], TenantService, \"globalTenants\", null);\n\n__decorate([Selector()], TenantService, \"defaultTenants\", null);\n\nTenantService = __decorate([StateRepository(), State({\n  name: 'tenantState',\n  defaults: {\n    globalTenants: [],\n    defaultTenants: []\n  }\n})], TenantService);\nexport { TenantService };","map":null,"metadata":{},"sourceType":"module"}