{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { NavigationItemIds } from 'src/app/main/main.navigation';\nimport { NavigationItemInputComplex } from './navigation.models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let NavigationService = /*#__PURE__*/(() => {\n  class NavigationService {\n    constructor(router) {\n      this.router = router;\n      this.itemsInternal = [];\n      this.currentBreadCrumb = [];\n    }\n\n    get items() {\n      return [...this.itemsInternal];\n    }\n\n    addItem(...addItems) {\n      addItems.forEach(addItem => {\n        if (!this.itemsInternal.some(item => item.id.toUpperCase() === addItem.id.toUpperCase())) {\n          this.itemsInternal.push(addItem);\n        }\n      });\n    }\n\n    clear() {\n      this.itemsInternal = [];\n    }\n\n    build(...ids) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const result = [];\n        let generatedItem;\n\n        for (let idInput of ids) {\n          let complex = false;\n          let id;\n\n          if (idInput instanceof NavigationItemInputComplex) {\n            id = idInput.id;\n            complex = true;\n          } else {\n            id = idInput;\n          }\n\n          if (id === NavigationItemIds.DIVIDER) {\n            generatedItem = {\n              type: 'divider'\n            };\n          } else {\n            let item = this.itemsInternal.find(internalItem => internalItem.id ? internalItem.id.toUpperCase() === id.toUpperCase() : false);\n            generatedItem = complex ? yield this.formatComplexNavigationItem(item, idInput) : item;\n          }\n\n          result.push(generatedItem);\n        }\n\n        return result.filter(item => item != null);\n      });\n    }\n\n    formatComplexNavigationItem(item, idInput) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const disabled = typeof idInput.disabled === 'boolean' ? idInput.disabled : yield idInput.disabled();\n        return Object.assign(Object.assign({}, item), {\n          disabled\n        });\n      });\n    }\n\n  }\n\n  NavigationService.ɵfac = function NavigationService_Factory(t) {\n    return new (t || NavigationService)(i0.ɵɵinject(i1.Router));\n  };\n\n  NavigationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NavigationService,\n    factory: NavigationService.ɵfac,\n    providedIn: 'root'\n  });\n  return NavigationService;\n})();","map":null,"metadata":{},"sourceType":"module"}