{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport let PhoneMaskDirective = /*#__PURE__*/(() => {\n  class PhoneMaskDirective {\n    constructor(ngControl, ngModel) {\n      this.ngControl = ngControl;\n      this.ngModel = ngModel;\n    }\n\n    onModelChange(event) {\n      this.onInputChange(event, false);\n    }\n\n    keydownBackspace(event) {\n      this.onInputChange(event.target.value, true);\n    }\n\n    onInputChange(event, backspace) {\n      let newVal = event.replace(/\\D/g, '');\n\n      if (backspace && newVal.length <= 6) {\n        newVal = newVal.substring(0, newVal.length - 1);\n      }\n\n      if (newVal.length === 0) {\n        newVal = '';\n      } else if (newVal.length <= 3) {\n        newVal = newVal.replace(/^(\\d{0,3})/, '($1)');\n      } else if (newVal.length <= 6) {\n        newVal = newVal.replace(/^(\\d{0,3})(\\d{0,3})/, '($1) $2');\n      } else if (newVal.length <= 10) {\n        newVal = newVal.replace(/^(\\d{0,3})(\\d{0,3})(\\d{0,4})/, '($1) $2-$3');\n      } else {\n        newVal = newVal.substring(0, 10);\n        newVal = newVal.replace(/^(\\d{0,3})(\\d{0,3})(\\d{0,4})/, '($1) $2-$3');\n      }\n\n      this.ngControl.valueAccessor.writeValue(newVal);\n      this.ngModel.viewToModelUpdate(newVal);\n      this.ngModel.valueAccessor.writeValue(newVal);\n    }\n\n  }\n\n  PhoneMaskDirective.ɵfac = function PhoneMaskDirective_Factory(t) {\n    return new (t || PhoneMaskDirective)(i0.ɵɵdirectiveInject(i1.NgControl), i0.ɵɵdirectiveInject(i1.NgModel));\n  };\n\n  PhoneMaskDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: PhoneMaskDirective,\n    selectors: [[\"\", \"formControlName\", \"\", \"appPhoneMask\", \"\"], [\"\", \"ngModel\", \"\", \"appPhoneMask\", \"\"], [\"input\", \"appPhoneMask\", \"\"], [\"\", \"appPhoneMask\", \"\"]],\n    hostBindings: function PhoneMaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"ngModelChange\", function PhoneMaskDirective_ngModelChange_HostBindingHandler($event) {\n          return ctx.onModelChange($event);\n        })(\"keydown.backspace\", function PhoneMaskDirective_keydown_backspace_HostBindingHandler($event) {\n          return ctx.keydownBackspace($event);\n        });\n      }\n    }\n  });\n  return PhoneMaskDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}