{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { UserService } from 'src/app/main/services/user/user.service';\nimport { TenantService } from './../tenant/tenant.service';\nimport { Selector, State } from '@ngxs/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngxs/store\";\nlet AggregatorsState = class AggregatorsState {\n  constructor(store) {\n    this.store = store;\n  }\n\n  static aggregatorMemberTenant(state, user, tenant) {\n    return user && tenant ? {\n      user,\n      tenant\n    } : null;\n  }\n\n  static aggregatorMemberTenantUser(state, userState, tenantState) {\n    return userState && tenantState ? {\n      userState,\n      tenantState\n    } : null;\n  }\n\n};\n\nAggregatorsState.ɵfac = function AggregatorsState_Factory(t) {\n  return new (t || AggregatorsState)(i0.ɵɵinject(i1.Store));\n};\n\nAggregatorsState.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AggregatorsState,\n  factory: AggregatorsState.ɵfac\n});\n\n__decorate([Selector([UserService, TenantService])], AggregatorsState, \"aggregatorMemberTenant\", null);\n\n__decorate([Selector([UserService, TenantService])], AggregatorsState, \"aggregatorMemberTenantUser\", null);\n\nAggregatorsState = __decorate([State({\n  name: 'aggregators',\n  defaults: null\n})], AggregatorsState);\nexport { AggregatorsState };","map":null,"metadata":{},"sourceType":"module"}