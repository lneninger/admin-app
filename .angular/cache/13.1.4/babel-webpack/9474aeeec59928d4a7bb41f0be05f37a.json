{"ast":null,"code":"import { getPlatform, COMPILER_OPTIONS, Injectable, InjectionToken } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\n/**\r\n * @param {?} equalityCheck\r\n * @param {?} prev\r\n * @param {?} next\r\n * @return {?}\r\n */\n\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n  /** @type {?} */\n\n\n  const length = prev.length;\n\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * Memoize a function on its last inputs only.\r\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\r\n *\r\n * @ignore\r\n * @template T\r\n * @param {?} func\r\n * @param {?=} equalityCheck\r\n * @return {?}\r\n */\n\n\nfunction memoize(func, equalityCheck = defaultEqualityCheck) {\n  /** @type {?} */\n  let lastArgs = null;\n  /** @type {?} */\n\n  let lastResult = null; // we reference arguments instead of spreading them for performance reasons\n\n  /**\r\n   * @return {?}\r\n   */\n\n  function memoized() {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult =\n      /** @type {?} */\n      func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  }\n\n  /** @type {?} */\n  memoized.reset =\n  /**\r\n  * @return {?}\r\n  */\n  function () {\n    // The hidden (for now) ability to reset the memoization\n    lastArgs = null;\n    lastResult = null;\n  };\n\n  return (\n    /** @type {?} */\n    memoized\n  );\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @return {?}\r\n */\n\n\nfunction _isAngularInTestMode() {\n  /** @type {?} */\n  const platformRef = getPlatform();\n  if (!platformRef) return false;\n  /** @type {?} */\n\n  const compilerOptions = platformRef.injector.get(COMPILER_OPTIONS, null);\n  if (!compilerOptions) return false;\n  /** @type {?} */\n\n  const isInTestMode = compilerOptions.some(\n  /**\r\n  * @param {?} item\r\n  * @return {?}\r\n  */\n  item => {\n    /** @type {?} */\n    const providers = item && item.providers || [];\n    return providers.some(\n    /**\r\n    * @param {?} provider\r\n    * @return {?}\r\n    */\n    provider => {\n      return provider && provider.provide && provider.provide.name === 'MockNgModuleResolver' || false;\n    });\n  });\n  return isInTestMode;\n}\n/** @type {?} */\n\n\nconst isAngularInTestMode = memoize(_isAngularInTestMode);\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nlet NgxsBootstrapper = /*#__PURE__*/(() => {\n  class NgxsBootstrapper {\n    constructor() {\n      /**\r\n       * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\r\n       */\n      this.bootstrap$ = new ReplaySubject(1);\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    get appBootstrapped$() {\n      return this.bootstrap$.asObservable();\n    }\n    /**\r\n     * This event will be emitted after attaching `ComponentRef` of the root component\r\n     * to the tree of views, that's a signal that application has been fully rendered\r\n     * @return {?}\r\n     */\n\n\n    bootstrap() {\n      this.bootstrap$.next(true);\n      this.bootstrap$.complete();\n    }\n\n  }\n\n  NgxsBootstrapper.ɵfac = function NgxsBootstrapper_Factory(t) {\n    return new (t || NgxsBootstrapper)();\n  };\n\n  NgxsBootstrapper.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NgxsBootstrapper,\n    factory: NgxsBootstrapper.ɵfac\n  });\n  return NgxsBootstrapper;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\r\n   * @type {?}\r\n   * @private\r\n   */\n  NgxsBootstrapper.prototype.bootstrap$;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/** @type {?} */\n\n\nconst INITIAL_STATE_TOKEN = new InjectionToken('INITIAL_STATE_TOKEN');\nlet InitialState = /*#__PURE__*/(() => {\n  class InitialState {\n    /**\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\n    static set(state) {\n      this.value = state;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    static pop() {\n      /** @type {?} */\n      const state = this.value;\n      this.value = {};\n      return state;\n    }\n\n  }\n\n  InitialState.value = {};\n  return InitialState;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n  InitialState.value;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @see StateContextFactory as it's referenced by this token to be accessed by plugins internally\r\n * @type {?}\r\n */\n\n\nconst NGXS_STATE_CONTEXT_FACTORY = new InjectionToken('Internals.StateContextFactory');\n/**\r\n * @see StateFactory as it's referenced by this token to be accessed by plugins internally\r\n * @type {?}\r\n */\n\nconst NGXS_STATE_FACTORY = new InjectionToken('Internals.StateFactory');\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { INITIAL_STATE_TOKEN, InitialState, NGXS_STATE_CONTEXT_FACTORY, NGXS_STATE_FACTORY, NgxsBootstrapper, isAngularInTestMode, memoize }; //# sourceMappingURL=ngxs-store-internals.js.map","map":null,"metadata":{},"sourceType":"module"}