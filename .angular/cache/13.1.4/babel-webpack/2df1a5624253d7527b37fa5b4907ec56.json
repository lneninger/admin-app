{"ast":null,"code":"import { coerceBoolean } from '@angular-ru/cdk/coercion';\n\nfunction $any(value) {\n  return value;\n}\n\nfunction $cast(value) {\n  return value;\n}\n\nfunction checkValueIsEmpty(value) {\n  // note: don't use isString for preserve circular dependencies\n  const val = typeof value === 'string' ? value.trim() : value;\n  return [undefined, null, NaN, '', Infinity].includes(val);\n}\n\nfunction checkEveryValueIsEmpty(...values) {\n  return values.every(checkValueIsEmpty);\n}\n\nfunction isFalse(value) {\n  return value === false;\n}\n\nfunction checkEveryValueIsFalse(...values) {\n  return values.length === 0 ? false : values.every(isFalse);\n}\n\nfunction checkValueIsFilled(value) {\n  return !checkValueIsEmpty(value);\n}\n\nfunction checkEveryValueIsFilled(...values) {\n  return values.every(checkValueIsFilled);\n}\n\nfunction isTrue(value) {\n  return value === true;\n}\n\nfunction checkEveryValueIsTrue(...values) {\n  return values.length === 0 ? false : values.every(isTrue);\n}\n\nfunction checkSomeValueIsEmpty(...values) {\n  return values.some(checkValueIsEmpty);\n}\n\nfunction checkSomeValueIsFalse(...values) {\n  return values.some(isFalse);\n}\n\nfunction checkSomeValueIsTrue(...values) {\n  return values.some(isTrue);\n}\n\nfunction isNil(value) {\n  return value === null || typeof value === 'undefined';\n}\n\nfunction isNotNil(value) {\n  return !isNil(value);\n} // eslint-disable-next-line max-lines-per-function\n\n\nfunction copyHtml(plainHtml) {\n  const element = document.createElement('div');\n  element.innerHTML = plainHtml;\n  element.style.position = 'absolute';\n  element.style.opacity = '0';\n  element.style.pointerEvents = 'none';\n  document.body.appendChild(element);\n  const range = document.createRange();\n  range.selectNode(element);\n  const selection = window.getSelection();\n\n  if (isNil(selection)) {\n    throw new Error('Selection is not supported by this browser');\n  }\n\n  const previousRange = selection.rangeCount > 0 ? selection.getRangeAt(0) : null;\n  selection.removeAllRanges();\n  selection.addRange(range); // eslint-disable-next-line deprecation/deprecation\n\n  document.execCommand('copy');\n  document.body.removeChild(element);\n\n  if (isNotNil(previousRange)) {\n    selection.removeAllRanges();\n    selection.addRange(previousRange);\n  }\n}\n/**\n * @deprecated Use `copyString`\n */\n\n\nconst copyBuffer = copyString;\n\nfunction copyString(str) {\n  var _a, _b, _c;\n\n  const firstIndex = 0;\n  const el = document.createElement('textarea');\n  el.value = str;\n  el.setAttribute('readonly', '');\n  el.style.position = 'absolute';\n  el.style.left = '-9999px';\n  document.body.appendChild(el);\n  const selected = ((_a = document === null || document === void 0 ? void 0 : document.getSelection()) === null || _a === void 0 ? void 0 : _a.rangeCount) > firstIndex ? document === null || document === void 0 ? void 0 : document.getSelection().getRangeAt(firstIndex) : false;\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n\n  if (coerceBoolean(selected)) {\n    (_b = document === null || document === void 0 ? void 0 : document.getSelection()) === null || _b === void 0 ? void 0 : _b.removeAllRanges();\n    (_c = document === null || document === void 0 ? void 0 : document.getSelection()) === null || _c === void 0 ? void 0 : _c.addRange(selected);\n  }\n}\n\nconst associative = {\n  unitIndex: 0,\n  pairIndex: 1,\n  multipleIndex: 2\n};\n/**\n * @description: We pass this function a number, and an array of headers,\n * among which the correct form will be chosen to match the number.\n * The first element of the directory is for units, the second is for pairs,\n * and the third is for other numbers.\n *\n *\n * The declination depends on the last digit of the number.\n * Second: 1.\n * Seconds: 0, 5, 6, 7, 8, 9.\n * Seconds: 2, 3, 4.\n *\n * Given the ranges used, the last digit can be obtained as a remainder of division by 10.\n *\n * @param numberValue example as 1\n * @param dictionary example as [\"арбуз\", \"арбуза\", \"арбузов\"]\n * @return Nullable<string> as \"арбуз\"\n */\n\nfunction declinationOfNumber(numberValue, dictionary) {\n  const remainder = Math.abs(numberValue) % 100;\n  let result;\n\n  if (isMultipleDeclination(remainder)) {\n    result = dictionary[associative.multipleIndex];\n  } else if (isPairDeclination(remainder)) {\n    result = dictionary[associative.pairIndex];\n  } else if (isUnitDeclination(remainder)) {\n    result = dictionary[associative.unitIndex];\n  } else {\n    result = dictionary[associative.multipleIndex];\n  }\n\n  return result;\n}\n\nfunction isMultipleDeclination(remainder) {\n  return remainder > 10 && remainder < 20;\n}\n\nfunction isPairDeclination(remainder) {\n  return remainder % 10 > 1 && remainder % 10 < 5;\n}\n\nfunction isUnitDeclination(remainder) {\n  return remainder % 10 === 1;\n}\n\nfunction detectChanges(detectorOrDetectors) {\n  if (isNil(detectorOrDetectors)) {\n    return;\n  }\n\n  if (Array.isArray(detectorOrDetectors)) {\n    detectorOrDetectors.forEach(detector => internalDetectChanges(detector));\n  } else if (isNotNil(detectorOrDetectors)) {\n    internalDetectChanges(detectorOrDetectors);\n  }\n}\n\nfunction internalDetectChanges(cd) {\n  if (isNotNil(cd) && !cd.destroyed) {\n    cd.detectChanges();\n  }\n}\n\nfunction downloadFile(file) {\n  if (checkEveryValueIsEmpty(file.name, file.extension)) {\n    throw new Error('File name or file extension must be provided');\n  }\n\n  const anchor = document.createElement('a');\n  const url = window.URL.createObjectURL(file.blob);\n  const filePath = [file.name, file.extension].filter(Boolean).join('.');\n  anchor.href = url;\n  anchor.download = filePath;\n  anchor.click();\n  window.URL.revokeObjectURL(url);\n}\n\nfunction fallbackIfEmpty(value, fallback) {\n  return checkValueIsEmpty(value) ? fallback : value;\n}\n/* eslint-disable @typescript-eslint/no-magic-numbers */\n\n\nfunction generateUid() {\n  // eslint-disable-next-line spellcheck/spell-checker\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction getBodyRect() {\n  var _a;\n\n  return (_a = document.querySelector('body')) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();\n}\n\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n\nfunction isTruthy(val) {\n  return Boolean(val);\n}\n\nfunction isFalsy(val) {\n  return !isTruthy(val);\n}\n\nfunction isIE(userAgent = navigator.userAgent) {\n  return /edge|msie\\s|trident\\//i.test(userAgent);\n}\n\nfunction parseXmlFromString(xml, type = 'application/xml') {\n  const parser = new DOMParser();\n  const dom = parser.parseFromString(xml, type);\n\n  if (dom.documentElement.nodeName === 'parsererror') {\n    console.error(dom);\n    throw new Error('error while parsing');\n  }\n\n  return dom;\n}\n\nconst DEFAULT_UNITS_MAP = {\n  s: 1,\n  m: 60,\n  h: 3600,\n  d: 86400,\n  w: 604800\n};\nconst NUMBER_PATTERN = `([0-9]+([\\.][0-9]+)?)`;\n\nfunction replaceUnits(text, unitsMap) {\n  return parseMultiLineText(text, unitsMap);\n}\n\nfunction parseMultiLineText(text, unitsMap) {\n  const textList = [];\n  text.split('\\n').forEach(item => {\n    let prepared = item;\n    prepared = replaceMultiple(prepared, unitsMap);\n    prepared = replaceSingle(prepared, unitsMap);\n    textList.push(prepared);\n  });\n  return textList.join('\\n');\n}\n\nfunction replaceMultiple(value, unitsMap) {\n  const pattern = getMultipleUnitsPattern(unitsMap);\n  let text = value;\n\n  while (pattern.test(text)) {\n    text = replaceByMatch(text, pattern, unitsMap);\n  }\n\n  return text;\n}\n\nfunction replaceSingle(value, unitsMap) {\n  const pattern = getSingleUnitPattern(unitsMap);\n  let text = value;\n\n  while (pattern.test(text)) {\n    text = replaceByMatch(text, pattern, unitsMap);\n  }\n\n  return text;\n}\n\nfunction replaceByMatch(text, pattern, unitsMap) {\n  var _a, _b;\n\n  const match = (_b = (_a = pattern.exec(text)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : '';\n  const num = convertToNumber(match, unitsMap);\n  const prepared = match.replace(RegExp(/\\S.*\\S/), num.toString());\n  return text.replace(pattern, prepared);\n}\n\nfunction convertToNumber(text, unitsMap) {\n  const units = text.trim();\n  const sum = units.split(' ').filter(item => item !== '').map(item => {\n    const coefficient = getCoefficient(item);\n    const unitValue = getUnitValue(item, unitsMap);\n    return coefficient * unitValue;\n  }).reduce((accumulator, item) => accumulator + item, 0);\n  return sum;\n}\n\nfunction getMultipleUnitsPattern(unitsMap) {\n  const unitKeys = getUnitKeys(unitsMap);\n  return new RegExp(`(^|\\\\s)((${NUMBER_PATTERN})(${unitKeys}))(\\\\s+((${NUMBER_PATTERN})(${unitKeys})))+(\\\\s|$)`);\n}\n\nfunction getSingleUnitPattern(unitsMap) {\n  const unitKeys = getUnitKeys(unitsMap);\n  return new RegExp(`(^|\\\\s)(${NUMBER_PATTERN})(${unitKeys})(\\\\s|$)`);\n}\n\nfunction getCoefficient(unit) {\n  var _a, _b;\n\n  const prefix = (_b = (_a = unit.match(`^${NUMBER_PATTERN}`)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : '';\n  const result = prefix.includes('.') ? parseFloat(prefix) : parseInt(prefix);\n  return result;\n}\n\nfunction getUnitValue(unit, unitsMap) {\n  var _a, _b, _c;\n\n  const postfix = (_b = (_a = unit.match(/[^0-9]+$/s)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : '';\n  return (_c = unitsMap[postfix]) !== null && _c !== void 0 ? _c : 0;\n}\n\nfunction getUnitKeys(unitsMap) {\n  return Object.keys(unitsMap).map(item => item.length > 1 ? `(${item})` : item).join('|');\n}\n\nfunction serializeXmlToString(xml) {\n  return new XMLSerializer().serializeToString(xml);\n}\n\nfunction tryParseJson(text) {\n  try {\n    return JSON.parse(text);\n  } catch (_a) {\n    return undefined;\n  }\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { $any, $cast, DEFAULT_UNITS_MAP, checkEveryValueIsEmpty, checkEveryValueIsFalse, checkEveryValueIsFilled, checkEveryValueIsTrue, checkSomeValueIsEmpty, checkSomeValueIsFalse, checkSomeValueIsTrue, checkValueIsEmpty, checkValueIsFilled, copyBuffer, copyHtml, copyString, declinationOfNumber, detectChanges, downloadFile, fallbackIfEmpty, generateUid, getBodyRect, isBoolean, isFalse, isFalsy, isIE, isNil, isNotNil, isTrue, isTruthy, parseXmlFromString, replaceUnits, serializeXmlToString, tryParseJson }; //# sourceMappingURL=angular-ru-cdk-utils.js.map","map":null,"metadata":{},"sourceType":"module"}