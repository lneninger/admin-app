{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { InjectionToken, NgModuleFactory } from '@angular/core';\nimport { LAZY_WIDGETS } from './tokens';\nimport * as i0 from \"@angular/core\";\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\nexport const LAZY_COMPONENT_METADATA = new InjectionToken('DynamicComponentData'); // export class DynamicConfig<T> {\n//     data: T;\n// }\n\nexport class LazyLoaderInjector {\n  constructor(_parentInjector, _additionalTokens) {\n    this._parentInjector = _parentInjector;\n    this._additionalTokens = _additionalTokens;\n  }\n\n  get(token, notFoundValue, flags) {\n    const value = this._additionalTokens.get(token);\n\n    if (value) {\n      return value;\n    }\n\n    return this._parentInjector.get(token, notFoundValue);\n  }\n\n}\nexport let LazyLoaderService = /*#__PURE__*/(() => {\n  class LazyLoaderService {\n    constructor(injector, compiler, lazyWidgets) {\n      this.injector = injector;\n      this.compiler = compiler;\n      this.lazyWidgets = lazyWidgets;\n    }\n\n    loadDirective(directive) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield this.load(directive.appLazy, directive.viewContainerRef, directive.metadata, directive.default);\n      });\n    }\n\n    load(name, container, data, dataToken = LAZY_COMPONENT_METADATA, defaultName = null) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (container.length === 0) {\n          const tempModule = yield this.downloadResource(name, defaultName);\n\n          if (!tempModule) {\n            return;\n          }\n\n          let moduleFactory;\n\n          if (tempModule instanceof NgModuleFactory) {\n            // For AOT\n            moduleFactory = tempModule;\n          } else {\n            // For JIT\n            moduleFactory = yield this.compiler.compileModuleAsync(tempModule);\n          }\n\n          let moduleRef;\n          const entryComponent = moduleFactory.moduleType.entry;\n          const map = new WeakMap();\n          map.set(dataToken, data);\n          moduleRef = moduleFactory.create(new LazyLoaderInjector(this.injector, map));\n          const compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);\n          container.clear();\n          container.createComponent(compFactory);\n        }\n      });\n    }\n\n    downloadResource(name, defaultName) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let result;\n        let loadTarget;\n\n        try {\n          loadTarget = this.lazyWidgets[name];\n\n          if (loadTarget != null) {\n            result = yield loadTarget();\n          } else {\n            throw {\n              error: `${name} is not defined as loading path. Please review in lazyWidgets configuration`\n            };\n          }\n        } catch (ex) {\n          console.error(ex);\n\n          if (defaultName) {\n            loadTarget = this.lazyWidgets[defaultName];\n            result = yield loadTarget();\n          } else {\n            throw ex;\n          }\n        }\n\n        return result;\n      });\n    }\n\n    processDirectives(views, targetUI) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (views) {\n          views.forEach(viewDirective => __awaiter(this, void 0, void 0, function* () {\n            const options = viewDirective.metadata && viewDirective.metadata.options;\n\n            if (!options || !options.targetUI && !targetUI || options.targetUI === targetUI) {\n              yield this.load(viewDirective.appLazy, viewDirective.viewContainerRef, viewDirective.metadata, LAZY_COMPONENT_METADATA, viewDirective.default);\n            }\n          }));\n        }\n      });\n    }\n\n  }\n\n  LazyLoaderService.ɵfac = function LazyLoaderService_Factory(t) {\n    return new (t || LazyLoaderService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.Compiler), i0.ɵɵinject(LAZY_WIDGETS));\n  };\n\n  LazyLoaderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LazyLoaderService,\n    factory: LazyLoaderService.ɵfac,\n    providedIn: 'root'\n  });\n  return LazyLoaderService;\n})();","map":null,"metadata":{},"sourceType":"module"}