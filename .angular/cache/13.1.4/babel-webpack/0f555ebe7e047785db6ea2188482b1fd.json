{"ast":null,"code":"export class UserLogin {\n  constructor(userName, password, rememberMe) {\n    this.userName = userName;\n    this.password = password;\n    this.rememberMe = rememberMe;\n  }\n\n}\nexport class UserModel {\n  constructor(input) {\n    Object.assign(this, input);\n  }\n\n}\nexport class User {\n  // Note: Using only optional constructor properties without backing store disables typescript's type checking for the type\n  constructor(id, userName, fullName, email, jobTitle, phoneNumber, roles) {\n    this.id = id;\n    this.userName = userName;\n    this.fullName = fullName;\n    this.email = email;\n    this.jobTitle = jobTitle;\n    this.phoneNumber = phoneNumber;\n    this.roles = roles;\n  }\n\n  get friendlyName() {\n    let name = this.fullName || this.userName;\n\n    if (this.jobTitle) {\n      name = this.jobTitle + ' ' + name;\n    }\n\n    return name;\n  }\n\n}\nexport class Role {\n  constructor(nameOrObj) {\n    if (typeof nameOrObj === 'string') {\n      this.name = nameOrObj;\n    } else {\n      const role = nameOrObj;\n      this.name = role.name;\n    }\n  }\n\n  inRole(...args) {\n    return this.internalInRole(args);\n  }\n\n  inRoles(args) {\n    return this.internalInRole(args);\n  }\n\n  internalInRole(args) {\n    const array = args;\n    return this.name.toUpperCase() === 'ADMIN' || args.some(roleItem => roleItem.toUpperCase() === this.name.toUpperCase());\n  }\n\n}\nexport let RoleList = /*#__PURE__*/(() => {\n  class RoleList {}\n\n  RoleList.Administrator = 'Admin';\n  RoleList.Screener = 'Screener';\n  RoleList.Advocate = 'Advocate';\n  RoleList.Member = 'Member';\n  RoleList.Tester = 'Tester';\n  RoleList.QualityAssurance = 'QualityAssurance';\n  return RoleList;\n})();","map":null,"metadata":{},"sourceType":"module"}